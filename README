# Project Name
> Problem statement: To build a CNN based model which can accurately detect melanoma. Melanoma is a type of cancer that can be deadly if not detected early. It accounts for 75% of skin cancer deaths. A solution that can evaluate images and alert dermatologists about the presence of melanoma has the potential to reduce a lot of manual effort needed in diagnosis.


## Table of Contents
* [General Info]

   Melanoma is responsible for 75% of skin cancer-related deaths, despite being less common than other types of skin cancer. Early detection is crucial for effective treatment and increasing patient survival rates. The challenge is to build an automated model that can:

   - Detect melanoma in dermatoscopic images with high accuracy.
  - Provide dermatologists with a tool to prioritize cases requiring urgent attention.
(#general-information)
* [Technologies Used]

  - Python: For model development and data processing.
  - TensorFlow & Keras: Deep learning frameworks used to build and train the CNN model.
  - OpenCV: For image processing and augmentation.
  - Matplotlib & Seaborn: For visualizing results and performance metrics.
* [Conclusions]
  
   This project demonstrated the effectiveness of CNNs in detecting melanoma from images. However, there are challenges related to class imbalance and overfitting that need to be addressed to further improve model performance. Techniques such as data augmentation, class weighting, and hyperparameter tuning were explored to enhance model generalization.
* [Acknowledgements](#acknowledgements)

<!-- You can include any other section that is pertinent to your problem -->

## General Information

- Dermatology Experts: For providing annotated datasets and guidance on melanoma detection.
- Online Resources & Research Papers: For insights into state-of-the-art techniques in medical image analysis.
- OpenAI & TensorFlow Community: For providing tools and resources that made this project possible.

<!-- You don't have to answer all the questions - just the ones relevant to your project. -->

## Conclusions
Based on the results of the model training and evaluation, we can draw the following conclusions:
- The model is experiencing significant overfitting, as indicated by the large discrepancy between training and validation accuracy.
- Despite achieving high training accuracy (~83% to ~87%), the validation accuracy remains low, around 52-56%, which implies poor generalization.
- The validation loss remains consistently high and even increases over epochs, suggesting the model is not effectively learning features from the validation data.
- Addressing issues like data imbalance and improving regularization strategies could help enhance the model's performance on unseen data.


<!-- You don't have to answer all the questions - just the ones relevant to your project. -->


## Technologies Used
- library - version 1.0
- library - version 2.0
- library - version 3.0

<!-- As the libraries versions keep on changing, it is recommended to mention the version of library used in this project -->

## Acknowledgements
Give credit here.
- Pradeep Kumar Madheshiya


## Contact
Created by [@PradeepMadheshiya (PradeepMadheshiya)] - feel free to contact me!


<!-- Optional -->
<!-- ## License -->
<!-- This project is open source and available under the [... License](). -->

<!-- You don't have to include all sections - just the one's relevant to your project -->
